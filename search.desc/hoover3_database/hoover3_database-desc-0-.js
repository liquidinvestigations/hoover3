searchState.loadedDescShard("hoover3_database", 0, "This module contains the database clients, model …\nThis module contains the client methods for interacting …\nCore database management module that defines common …\nMacro to implement Charybdis callbacks for a model struct.\nThis module contains the database migration functions, …\nThis module contains the table definitions for all the …\nCollection management module that provides functionality …\nDatabase explorer module that provides functionality to …\nDatasource management module that provides functionality …\nDocker health module that provides functionality to get …\nList files and directories on disk.\nClient API method to create a new collection, including …\nClient API method used to drop a collection, all databases …\nClient API method, returns list of all collections in …\nClient API method, returns details for a single collection …\nClient API method used to update collection title and …\nExecute a query against the specified database type …\nRun a Scylla query and return the result.\nConvert a Scylla query result into a DynamicQueryResult.\nGet Scylla table row count by running SQL request …\nCreate a new datasource in the given collection. Repeated …\nDrop a datasource from the given collection. Dropping a …\nClient API method, returns details for a single collection …\nGet details for a single datasource in the given …\nClient API method for generating health check dashboard. …\nGet metadata for a single file or directory on disk.\nList all files and directories in the given directory on …\nClickHouse database handle type alias.\nRepresents a unique collection identifier\nType representing a collection-specific database session\nRepresents a unique database identifier\nTrait defining the interface for managing database spaces …\nMeilisearch database handle type alias.\nNebula database handle type alias.\nSeaweed database handle type alias.\nScylla database handle type alias.\nClickHouse database management module that provides …\nCreates a new database session for a specific collection\nCreates a new database space with the given name\nGenerates the database/keyspace name for this collection\nDrops/deletes an existing database space\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new global database session\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a list of all database spaces\nMeilisearch database management module that handles index …\nWait for a Meilisearch task to complete and return the …\nNebula graph database management module that implements …\nExecute a query against the Nebula database and …\nCreates a new collection ID after validating the input …\nCreates a new database identifier after validating the …\nRedis cache and lock management module that provides …\nScyllaDB database management module that implements …\nChecks if a database space exists by name\nExecute a function with a Redis cache. If the cache is …\nAcquire a distributed lock on a Redis server and execute a …\nClickHouse database handle type alias.\nMeilisearch database handle type alias.\nWait for a Meilisearch task to complete and return the …\nNebula database handle type alias.\nExecute a query against the Nebula database and …\nExecute a function with a Redis cache. If the cache is …\nAcquire a distributed lock on a Redis server and execute a …\nScylla database handle type alias.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSeaweed database handle type alias.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAPI Client method to migrate the Nebula database for a …\nDrop databases for a single collection.\nAPI Client method to get all the database schemas for a …\nSometimes we run from workspace root. Sometimes we run …\nMigrate all databases for all collections.\nMigrate databases for a single collection.\nMigrate the common database schema (the one not related to …\nAPI Client method to get the Nebula database schema for a …\nAPI Client method to get the Meilisearch database schema …\nAPI Client method to migrate the Nebula database for a …\nAPI Client method to get the Nebula database schema for a …\nAPI Client method to get the Scylla database schema for a …\nThis module contains the table definitions for all the …\nThis module contains the table definitions for all the …\nExtra runtime information for running database …\nBatch insert edges into a Nebula database.\nThis module implements the <code>impl_model_callbacks</code> macro, …\nThis module contains the definitions for all the nebula …\nUnique identifier for the collection\nThis module contains the table definitions for all the …\nThis module contains the table definitions for all the …\nGet a JSON representation of a row for indexing in …\nMacro to implement Charybdis callbacks for a model struct.\nMacro to implement Charybdis callbacks for a model struct.\nSchema of the Nebula database\nCompute a stable hash of a row’s primary key, and …\nHandle to the Meilisearch database\nExtra runtime information for running database …\nBatch insert edges into a Nebula database.\nUnique identifier for the collection\nDelete a batch of rows from the secondary databases, …\nExecute the batch insert, consuming the batch.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a JSON representation of a row for indexing in …\nInsert a batch of rows into the secondary databases, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSchema of the Nebula database\nCreate a new empty batch.\nCreate a new <code>DatabaseExtraCallbacks</code> instance by opening …\nAdd a new edge to the batch.\nCompute a stable hash of a row’s primary key, and …\nHandle to the Meilisearch database\nUnit struct to identify a Nebula edge `$id``.\nTrait for unit structs that can be used to identify a …\nReturns the argument unchanged.\nGet all the Nebula edge types. Don’t forget to add new …\nCalls <code>U::from(self)</code>.\nGet the name of the edge.\nConvert the edge to a <code>GraphEdgeType</code>.\nDatabase representation of a datasource in the system. …\nUnique identifier for the datasource\nSettings for the datasource\nType of the datasource\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTimestamp when the datasource was initially created\nTimestamp of the most recent modification to the datasource\nConvert a <code>DatasourceDbRow</code> to frontend representation.\nDatabase representation of a filesystem directory, as it …\nScylla User Defined Type for the result of a directory …\nDatabase representation of a filesystem file, as it is …\nTimestamp of the directory’s creation\nTimestamp of the file’s creation\nUnique identifier for the datasource\nUnique identifier for the datasource\nNumber of subdirectories in the directory\nNumber of errors encountered during the scan\nNumber of files in the directory\nTotal size of all files in the directory\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a <code>FsDirectoryDbRow</code> from a <code>FsMetadataBasic</code> which …\nCreate a <code>FsFileDbRow</code> from a <code>FsMetadataBasic</code> which comes …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTimestamp of the most recent modification to the directory\nTimestamp of the file’s last modification\nPath to the directory\nPath to the file\nScan results for the directory’s direct children\nScan results for the directory’s total contents, …\nSize of the directory in bytes\nSize of the file in bytes\nConvert a <code>FsDirectoryDbRow</code> to frontend representation.\nConvert a <code>FsFileDbRow</code> to frontend representation.\nThis module contains the table definitions for the …\nDatabase representation of a collection in the system. …\nDetailed description of the collection’s contents and …\nUnique identifier for the collection\nTitle/name of the collection\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTimestamp when the collection was initially created\nTimestamp of the most recent modification to the collection\nConvert a <code>CollectionDbRow</code> to a <code>CollectionUiRow</code>.")