searchState.loadedDescShard("hoover3_taskdef", 0, "Task definition macros, clients, workers - wrappers over …\nContains an instance of a namespace-bound client for …\nA wrapper for a WorkflowClientTrait or …\nTemporal client wrapper\nAttribute macro for defining activities. Its only argument …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a Temporal client from global client cache.\nReturn the inner client type\nReturn the inner client type mutably\nReturns a reference to the underlying client\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDisable retry and return the inner client type\nConsumes self and returns the underlying client\nCreate an activity descriptor struct called $id_activity\nCreate an activity descriptor struct called $id_activity\nCreate a workflow descriptor struct called $id_workflow\nUse the provided retry config with the provided client\nCreate a new client from an existing configured lower …\nReturn the options this client was initialized with\nReturn the options this client was initialized with mutably\nAccess the underling grpc client. This raw client is not …\nReturn an auto-retrying version of the underling grpc …\nTask definition macros, clients, workers - wrappers over …\nAttribute macro for defining workflows. Its only argument …\nContains an instance of a namespace-bound client for …\nA wrapper for a WorkflowClientTrait or …\nTemporal client wrapper\nGet a Temporal client from global client cache.\nUsed within activities to get info, heartbeat management …\nReturned as errors from activity functions\nOptions for scheduling an activity\nUsed to report activity resolutions to lang. IE: This is …\nRepresents a workflow that was already completed\nThe input type for the Temporalio thing (activity, …\nConfirm the workflow was cancelled (can be automatic in a …\nReturn this error to indicate your activity is cancelling\nA future representing a child workflow that is either …\nContinue the workflow as a new execution\nHolds shared state/components needed to back instances of …\nContains the error value\nThe run was evicted\nA future represents an asynchronous computation obtained …\nReturn this error to indicate that your activity …\nFinish with a result\nContains the success value\nThe type of value produced on completion.\nA Duration represents a signed, fixed-length span of time …\nThe output type for the Temporalio thing (activity, …\nHow retries ought to be handled, usable by both workflows …\nThis error can be returned from activities to allow the …\nRepresents a currently executing child workflow\nValue 1 is hardcoded in SQL persistence.\nChild workflow in started state\nThe default namespace for Temporalio tasks\nTrait implemented by the <code>make_activity</code> macro.\nTemporal client wrapper\nGlobal name for this Temporalio thing (activity, workflow)\nTrait to register a Temporalio thing (activity, workflow) …\nTrait to define the input and output types for a …\nTrait implemented by the <code>make_workflow</code> macro.\nUsed within workflows to issue commands, get info, etc.\nWorkflow functions may return these values when exiting\nA worker that can poll for and respond to workflow tasks …\nThis trait provides higher-level friendlier interaction …\n(– api-linter: core::0216::synonyms=disabled …\nOptional fields supplied at the start of workflow execution\nThe result of running a workflow\nRequest to run an activity\nIdentifier to use for tracking the activity in Workflow …\nType of activity to schedule\nGet custom Application Data\nString value of the enum field names used in the ProtoBuf …\nCoefficient used to calculate the next retry interval. The …\nGenerates a unique build identifier string\nConverts a hex byte slice to a string representation\nReturns number of currently cached workflows as understood …\nCancel the child workflow\nCancel activity task by sending response to the server. …\nRequest the cancellation of an external workflow. May …\nCancel a currently executing workflow\nDetermines what the SDK does when the Activity is …\nReturns a future the completes if and when the activity …\nA future that resolves if/when the workflow is cancelled\nConstruct a cancelled error without details\nCreates a child workflow stub with the provided options\nGet the result of a workflow using a HTTP client. If the …\nGet the status of a workflow using a HTTP client. Use this …\nStart a workflow using a HTTP client. If the workflow …\nWait for a workflow to complete using HTTP client, …\nComplete activity task by sending response to the server. …\nConstruct a WfExitValue::ContinueAsNew variant (handles …\nConverts a Temporal workflow execution status to a …\nCreates a new Temporal worker with the specified …\nOptionally set a cron schedule for the workflow\nReturn the Build ID as it was when this point in the …\nRecord that this workflow history was created with the …\nQuery namespace details\nGet information about a workflow run\nWhen <code>request_eager_execution</code> is set on the …\nOptionally enable Eager Workflow Start, a latency …\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nOptionally set the execution timeout for the workflow …\nRetrieve extra parameters to the Activity. The first input …\nFail activity task by sending response to the server. …\nForce a workflow task failure (EX: in order to retry on …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>WorkflowExecutionStatus</code>, or <code>None</code> if …\nCreates an enum from field names used in the ProtoBuf …\nThe function that implements the activity.\nGet the arguments provided to the workflow upon execution …\nExtract heartbeat details from last failed attempt. This …\nGet activity info of the executing activity\nReturns options that were used to initialize the client\nGet Cluster Search Attributes\nGet history for a particular workflow run\nGet headers attached to this activity\nHeartbeat interval. Activity must heartbeat before this …\nReturn the length of history so far at this point in the …\nSet the policy for how to resolve conflicts with running …\nSet the policy for reusing the workflow id\nIf T1 and T2 can be registered, then so can (T1,T2) and …\nInitialize a worker bound to a task queue.\nInterval of the first retry. If retryBackoffCoefficient is …\nInput to the activity\nInsert Custom App Context for Workflows and Activities\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if this activity has already been cancelled\nReturns <code>true</code> if <code>value</code> is a variant of …\nList archived workflow executions\nList closed workflow executions Standard Visibility …\nLists all available namespaces\nList open workflow executions with Standard Visibility …\nList workflow executions with Advanced Visibility filtering\nRequest to run a local activity\nCreate an activity descriptor struct called $id_activity\nCreate an activity descriptor struct called $id_activity\nReturn a stream that produces values when the named signal …\nCreate a workflow descriptor struct called $id_workflow\nMaximum number of attempts. When exceeded the retries stop …\nMaximum interval between retries. Exponential backoff …\nDecodes an instance of the message from a buffer, and …\nThe static name of the Temporalio thing (activity, …\nReturns the namespace this client is bound to\nReturn the namespace the workflow is executing in\nSigned fractions of a second at nanosecond resolution of …\nCreate a new core runtime with the provided telemetry …\nInitialize telemetry for the thread this is being called …\nConstruct a runtime from an already-initialized telemetry …\nCreate a new Rust SDK worker from a core worker\nNon-Retryable errors types. Will stop retrying if the …\nNormalizes the duration to a canonical format.\nCheck (or record) that this workflow history was created …\nAttempts to resolve the future to a final value, …\nRequest a query of a certain workflow instance\nRetrieves the final result payload from a completed …\nRetrieves the current status of a workflow execution\nThe name of the queue to register the Temporalio thing …\nReturn the workflow’s randomness seed\nReport activity task heartbeat by sending details to the …\nRecordHeartbeat sends heartbeat for the currently …\nRegister the Temporalio thing (activity, workflow) into a …\nRegister the activity into a given worker\nRegister the workflow into a given worker\nRegister an Activity function to invoke when the Worker is …\nRegister a new namespace\nRegister a Workflow function to invoke when the Worker is …\nNotifies the server that workflow tasks for a given …\nRespond to a legacy query-only workflow task\nGets the result of the child workflow execution\nConsumes self and returns a future that will wait until …\nActivity retry policy\nOptionally set a retry policy for the workflow\nRun the activity from a context, “blocking” the caller …\nRuns the worker. Eventually resolves after the worker has …\nRun the workflow as a child workflow, “blocking” until …\nRun ID of the child workflow\nThe run id of the workflow that was started - or used (via …\nRun the workflow in parallel, returning a vector of …\nOptionally indicates the default run timeout for a …\nRuns a worker on the current thread until completion\nTotal time that a workflow is willing to wait for Activity …\nTime that the Activity Task can stay in the Task Queue …\nReturn current values for workflow search attributes\nOptionally associate extra search attributes with a …\nSigned seconds of the span of time. Must be from …\nSet a WorkerInterceptor\nReturn a handle that can be used to initiate shutdown. …\nSignal the child workflow\nSend signal and start workflow transcationally\nSend a signal to an external workflow. May resolve as a …\nSend a signal to a certain workflow instance\nSpawns a worker on a new thread and returns the join handle\nStart the workflow as a child workflow, returning a future …\nMaximum time of a single Activity execution attempt. Note …\nStarts workflow execution.\nIf true, a new workflow was started.\nWorkflow status tree - recursively fetch workflow status …\nExtract an activity’s payload if it completed …\nReturns the task queue name this worker polls on\nReturn the task queue the workflow is executing in\nTask queue to schedule the activity in\nOptionally indicates the default task timeout for a …\nReturn a reference to the owned TelemetryInstance\nReturn a mutable reference to the owned TelemetryInstance\nTerminate a currently executing workflow\nIntegration tests for the taskdef macros.\nRequest to create a timer\nGet a handle to the tokio runtime used by this Core …\nConverts a <code>std::time::Duration</code> to a <code>Duration</code>, failing if …\nIf this resolution is any kind of failure, return the …\nRegister an update handler by providing the handler name, …\nSend an Update to a workflow execution\nAdd or create a set of search attributes\nAdd or create a set of search attributes\nThe function that implements the workflow.\nTurns this rust worker into a new worker with all the same …\nGenerate a workflow id from an argument, using the stable …\nReturn the current time according to the workflow (which …\nSome data to save as the cancellation reason\nIf specified, the next retry (if there is one) will occur …\nThe underlying error\nRetrieves a cached workflow status tree for the given …\nLists child workflows and their execution counts for a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMacro-generated unit struct that holds our sample_workflow2\nMacro-generated unit struct that holds our …\nMacro-generated unit struct that holds our …")