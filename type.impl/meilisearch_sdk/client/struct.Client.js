(function() {
    var type_impls = Object.fromEntries([["hoover3_database",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Client%3CHttp%3E\" class=\"impl\"><a href=\"#impl-Client%3CHttp%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Http&gt; Client&lt;Http&gt;<div class=\"where\">where\n    Http: HttpClient,</div></h3></section></summary><div class=\"docblock\"><p>Dump related methods.\nSee the <a href=\"crate::dumps\">dumps</a> module.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.create_dump\" class=\"method\"><h4 class=\"code-header\">pub async fn <a class=\"fn\">create_dump</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;TaskInfo, Error&gt;</h4></section></summary><div class=\"docblock\"><p>Triggers a dump creation process.</p>\n<p>Once the process is complete, a dump is created in the <a href=\"https://www.meilisearch.com/docs/learn/configuration/instance_options#dump-directory\">dumps directory</a>.\nIf the dumps directory does not exist yet, it will be created.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>task_info = client.create_dump().<span class=\"kw\">await</span>.unwrap();\n\n<span class=\"macro\">assert!</span>(<span class=\"macro\">matches!</span>(\n    task_info,\n    TaskInfo {\n        update_type: TaskType::DumpCreation { .. },\n        ..\n    }\n));</code></pre></div>\n</div></details></div></details>",0,"hoover3_database::db_management::meilisearch::MeilisearchDatabaseHandle"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Client%3CHttp%3E\" class=\"impl\"><a href=\"#impl-Client%3CHttp%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Http&gt; Client&lt;Http&gt;<div class=\"where\">where\n    Http: HttpClient,</div></h3></section></summary><div class=\"docblock\"><p>Snapshots related methods.\nSee the <a href=\"crate::snapshots\">snapshots</a> module.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.create_snapshot\" class=\"method\"><h4 class=\"code-header\">pub async fn <a class=\"fn\">create_snapshot</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;TaskInfo, Error&gt;</h4></section></summary><div class=\"docblock\"><p>Triggers a snapshots creation process.</p>\n<p>Once the process is complete, a snapshots is created in the [snapshots directory].\nIf the snapshots directory does not exist yet, it will be created.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>task_info = client.create_snapshot().<span class=\"kw\">await</span>.unwrap();\n\n<span class=\"macro\">assert!</span>(<span class=\"macro\">matches!</span>(\n    task_info,\n    TaskInfo {\n        update_type: TaskType::SnapshotCreation { .. },\n        ..\n    }\n));</code></pre></div>\n</div></details></div></details>",0,"hoover3_database::db_management::meilisearch::MeilisearchDatabaseHandle"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Client%3CHttp%3E\" class=\"impl\"><a href=\"#impl-Client%3CHttp%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Http&gt; Client&lt;Http&gt;<div class=\"where\">where\n    Http: HttpClient,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.new_with_client\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">new_with_client</a>(\n    host: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.84.1/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;,\n    api_key: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.84.1/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;&gt;,\n    http_client: Http,\n) -&gt; Client&lt;Http&gt;</h4></section><section id=\"method.execute_multi_search_query\" class=\"method\"><h4 class=\"code-header\">pub async fn <a class=\"fn\">execute_multi_search_query</a>&lt;T&gt;(\n    &amp;self,\n    body: &amp;MultiSearchQuery&lt;'_, '_, Http&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;MultiSearchResponse&lt;T&gt;, Error&gt;<div class=\"where\">where\n    T: 'static + <a class=\"trait\" href=\"https://docs.rs/serde/1.0.217/serde/de/trait.DeserializeOwned.html\" title=\"trait serde::de::DeserializeOwned\">DeserializeOwned</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>,</div></h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.multi_search\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">multi_search</a>(&amp;self) -&gt; MultiSearchQuery&lt;'_, '_, Http&gt;</h4></section></summary><div class=\"docblock\"><p>Make multiple search requests.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#[derive(Serialize, Deserialize, Debug)]\n</span><span class=\"kw\">struct </span>Movie {\n    name: String,\n    description: String,\n}\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>movies = client.index(<span class=\"string\">\"search\"</span>);\n\n<span class=\"kw\">let </span>search_query_1 = SearchQuery::new(<span class=\"kw-2\">&amp;</span>movies)\n    .with_query(<span class=\"string\">\"Interstellar\"</span>)\n    .build();\n<span class=\"kw\">let </span>search_query_2 = SearchQuery::new(<span class=\"kw-2\">&amp;</span>movies)\n    .with_query(<span class=\"string\">\"\"</span>)\n    .build();\n\n<span class=\"kw\">let </span>response = client\n    .multi_search()\n    .with_search_query(search_query_1)\n    .with_search_query(search_query_2)\n    .execute::&lt;Movie&gt;()\n    .<span class=\"kw\">await\n    </span>.unwrap();\n\n<span class=\"macro\">assert_eq!</span>(response.results.len(), <span class=\"number\">2</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_host\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">get_host</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.str.html\">str</a></h4></section></summary><div class=\"docblock\"><p>Return the host associated with this index.</p>\n<h5 id=\"example-1\"><a class=\"doc-anchor\" href=\"#example-1\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>client = Client::new(<span class=\"string\">\"http://doggo.dog\"</span>, <span class=\"prelude-val\">Some</span>(MEILISEARCH_API_KEY)).unwrap();\n\n<span class=\"macro\">assert_eq!</span>(client.get_host(), <span class=\"string\">\"http://doggo.dog\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_api_key\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">get_api_key</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.str.html\">str</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Return the api key associated with this index.</p>\n<h5 id=\"example-2\"><a class=\"doc-anchor\" href=\"#example-2\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>client = Client::new(MEILISEARCH_URL, <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"doggo\"</span>)).unwrap();\n\n<span class=\"macro\">assert_eq!</span>(client.get_api_key(), <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"doggo\"</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.list_all_indexes\" class=\"method\"><h4 class=\"code-header\">pub async fn <a class=\"fn\">list_all_indexes</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;IndexesResults&lt;Http&gt;, Error&gt;</h4></section></summary><div class=\"docblock\"><p>List all <a href=\"Index\">Indexes</a> with query parameters and return values as instances of [Index].</p>\n<h5 id=\"example-3\"><a class=\"doc-anchor\" href=\"#example-3\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>indexes: IndexesResults = client.list_all_indexes().<span class=\"kw\">await</span>.unwrap();\n\n<span class=\"kw\">let </span>indexes: IndexesResults = client.list_all_indexes().<span class=\"kw\">await</span>.unwrap();\n<span class=\"macro\">println!</span>(<span class=\"string\">\"{:?}\"</span>, indexes);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.list_all_indexes_with\" class=\"method\"><h4 class=\"code-header\">pub async fn <a class=\"fn\">list_all_indexes_with</a>(\n    &amp;self,\n    indexes_query: &amp;IndexesQuery&lt;'_, Http&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;IndexesResults&lt;Http&gt;, Error&gt;</h4></section></summary><div class=\"docblock\"><p>List all <a href=\"Index\">Indexes</a> and returns values as instances of [Index].</p>\n<h5 id=\"example-4\"><a class=\"doc-anchor\" href=\"#example-4\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>query = IndexesQuery::new(<span class=\"kw-2\">&amp;</span>client);\nquery.with_limit(<span class=\"number\">1</span>);\n\n<span class=\"kw\">let </span>indexes: IndexesResults = client.list_all_indexes_with(<span class=\"kw-2\">&amp;</span>query).<span class=\"kw\">await</span>.unwrap();\n\n<span class=\"macro\">assert_eq!</span>(indexes.limit, <span class=\"number\">1</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.list_all_indexes_raw\" class=\"method\"><h4 class=\"code-header\">pub async fn <a class=\"fn\">list_all_indexes_raw</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"https://docs.rs/serde_json/1.0.138/serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a>, Error&gt;</h4></section></summary><div class=\"docblock\"><p>List all <a href=\"Index\">Indexes</a> and returns as Json.</p>\n<h5 id=\"example-5\"><a class=\"doc-anchor\" href=\"#example-5\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>json_indexes = client.list_all_indexes_raw().<span class=\"kw\">await</span>.unwrap();\n\n<span class=\"macro\">println!</span>(<span class=\"string\">\"{:?}\"</span>, json_indexes);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.list_all_indexes_raw_with\" class=\"method\"><h4 class=\"code-header\">pub async fn <a class=\"fn\">list_all_indexes_raw_with</a>(\n    &amp;self,\n    indexes_query: &amp;IndexesQuery&lt;'_, Http&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"https://docs.rs/serde_json/1.0.138/serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a>, Error&gt;</h4></section></summary><div class=\"docblock\"><p>List all <a href=\"Index\">Indexes</a> with query parameters and returns as Json.</p>\n<h5 id=\"example-6\"><a class=\"doc-anchor\" href=\"#example-6\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>query = IndexesQuery::new(<span class=\"kw-2\">&amp;</span>client);\nquery.with_limit(<span class=\"number\">1</span>);\n\n<span class=\"kw\">let </span>json_indexes = client.list_all_indexes_raw_with(<span class=\"kw-2\">&amp;</span>query).<span class=\"kw\">await</span>.unwrap();\n\n<span class=\"macro\">println!</span>(<span class=\"string\">\"{:?}\"</span>, json_indexes);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_index\" class=\"method\"><h4 class=\"code-header\">pub async fn <a class=\"fn\">get_index</a>(\n    &amp;self,\n    uid: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.str.html\">str</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Index&lt;Http&gt;, Error&gt;</h4></section></summary><div class=\"docblock\"><p>Get an [Index], this index should already exist.</p>\n<h5 id=\"example-7\"><a class=\"doc-anchor\" href=\"#example-7\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>index = client.get_index(<span class=\"string\">\"get_index\"</span>).<span class=\"kw\">await</span>.unwrap();\n\n<span class=\"macro\">assert_eq!</span>(index.as_ref(), <span class=\"string\">\"get_index\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_raw_index\" class=\"method\"><h4 class=\"code-header\">pub async fn <a class=\"fn\">get_raw_index</a>(&amp;self, uid: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.str.html\">str</a>&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"https://docs.rs/serde_json/1.0.138/serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a>, Error&gt;</h4></section></summary><div class=\"docblock\"><p>Get a raw JSON [Index], this index should already exist.</p>\n<p>If you use it directly from an [Index], you can use the method [<code>Index::fetch_info</code>], which is the equivalent method from an index.</p>\n<h5 id=\"example-8\"><a class=\"doc-anchor\" href=\"#example-8\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>raw_index = client.get_raw_index(<span class=\"string\">\"get_raw_index\"</span>).<span class=\"kw\">await</span>.unwrap();\n\n<span class=\"macro\">assert_eq!</span>(raw_index.get(<span class=\"string\">\"uid\"</span>).unwrap().as_str().unwrap(), <span class=\"string\">\"get_raw_index\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">index</a>(&amp;self, uid: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.84.1/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;) -&gt; Index&lt;Http&gt;</h4></section></summary><div class=\"docblock\"><p>Create a corresponding object of an [Index] without any check or doing an HTTP call.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.create_index\" class=\"method\"><h4 class=\"code-header\">pub async fn <a class=\"fn\">create_index</a>(\n    &amp;self,\n    uid: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.str.html\">str</a>&gt;,\n    primary_key: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.str.html\">str</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;TaskInfo, Error&gt;</h4></section></summary><div class=\"docblock\"><p>Create an [Index].</p>\n<p>The second parameter will be used as the primary key of the new index.\nIf it is not specified, Meilisearch will <strong>try</strong> to infer the primary key.</p>\n<h5 id=\"example-9\"><a class=\"doc-anchor\" href=\"#example-9\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"comment\">// Create a new index called movies and access it\n</span><span class=\"kw\">let </span>task = client.create_index(<span class=\"string\">\"create_index\"</span>, <span class=\"prelude-val\">None</span>).<span class=\"kw\">await</span>.unwrap();\n\n<span class=\"comment\">// Wait for the task to complete\n</span><span class=\"kw\">let </span>task = task.wait_for_completion(<span class=\"kw-2\">&amp;</span>client, <span class=\"prelude-val\">None</span>, <span class=\"prelude-val\">None</span>).<span class=\"kw\">await</span>.unwrap();\n\n<span class=\"comment\">// Try to get the inner index if the task succeeded\n</span><span class=\"kw\">let </span>index = task.try_make_index(<span class=\"kw-2\">&amp;</span>client).unwrap();\n\n<span class=\"macro\">assert_eq!</span>(index.as_ref(), <span class=\"string\">\"create_index\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.delete_index\" class=\"method\"><h4 class=\"code-header\">pub async fn <a class=\"fn\">delete_index</a>(\n    &amp;self,\n    uid: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.str.html\">str</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;TaskInfo, Error&gt;</h4></section></summary><div class=\"docblock\"><p>Delete an index from its UID.</p>\n<p>To delete an [Index], use the [<code>Index::delete</code>] method.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_indexes\" class=\"method\"><h4 class=\"code-header\">pub async fn <a class=\"fn\">get_indexes</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;IndexesResults&lt;Http&gt;, Error&gt;</h4></section></summary><div class=\"docblock\"><p>Alias for [<code>Client::list_all_indexes</code>].</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_indexes_with\" class=\"method\"><h4 class=\"code-header\">pub async fn <a class=\"fn\">get_indexes_with</a>(\n    &amp;self,\n    indexes_query: &amp;IndexesQuery&lt;'_, Http&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;IndexesResults&lt;Http&gt;, Error&gt;</h4></section></summary><div class=\"docblock\"><p>Alias for [<code>Client::list_all_indexes_with</code>].</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_indexes_raw\" class=\"method\"><h4 class=\"code-header\">pub async fn <a class=\"fn\">get_indexes_raw</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"https://docs.rs/serde_json/1.0.138/serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a>, Error&gt;</h4></section></summary><div class=\"docblock\"><p>Alias for [<code>Client::list_all_indexes_raw</code>].</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_indexes_raw_with\" class=\"method\"><h4 class=\"code-header\">pub async fn <a class=\"fn\">get_indexes_raw_with</a>(\n    &amp;self,\n    indexes_query: &amp;IndexesQuery&lt;'_, Http&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"https://docs.rs/serde_json/1.0.138/serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a>, Error&gt;</h4></section></summary><div class=\"docblock\"><p>Alias for [<code>Client::list_all_indexes_raw_with</code>].</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.swap_indexes\" class=\"method\"><h4 class=\"code-header\">pub async fn <a class=\"fn\">swap_indexes</a>(\n    &amp;self,\n    indexes: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = &amp;SwapIndexes&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;TaskInfo, Error&gt;</h4></section></summary><div class=\"docblock\"><p>Swaps a list of two <a href=\"Index\">Indexes</a>.</p>\n<h5 id=\"example-10\"><a class=\"doc-anchor\" href=\"#example-10\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>task_index_1 = client.create_index(<span class=\"string\">\"swap_index_1\"</span>, <span class=\"prelude-val\">None</span>).<span class=\"kw\">await</span>.unwrap();\n<span class=\"kw\">let </span>task_index_2 = client.create_index(<span class=\"string\">\"swap_index_2\"</span>, <span class=\"prelude-val\">None</span>).<span class=\"kw\">await</span>.unwrap();\n\n<span class=\"comment\">// Wait for the task to complete\n</span>task_index_2.wait_for_completion(<span class=\"kw-2\">&amp;</span>client, <span class=\"prelude-val\">None</span>, <span class=\"prelude-val\">None</span>).<span class=\"kw\">await</span>.unwrap();\n\n<span class=\"kw\">let </span>task = client\n    .swap_indexes([<span class=\"kw-2\">&amp;</span>SwapIndexes {\n        indexes: (\n            <span class=\"string\">\"swap_index_1\"</span>.to_string(),\n            <span class=\"string\">\"swap_index_2\"</span>.to_string(),\n        ),\n    }])\n    .<span class=\"kw\">await\n    </span>.unwrap();\n\nclient.index(<span class=\"string\">\"swap_index_1\"</span>).delete().<span class=\"kw\">await</span>.unwrap().wait_for_completion(<span class=\"kw-2\">&amp;</span>client, <span class=\"prelude-val\">None</span>, <span class=\"prelude-val\">None</span>).<span class=\"kw\">await</span>.unwrap();\nclient.index(<span class=\"string\">\"swap_index_2\"</span>).delete().<span class=\"kw\">await</span>.unwrap().wait_for_completion(<span class=\"kw-2\">&amp;</span>client, <span class=\"prelude-val\">None</span>, <span class=\"prelude-val\">None</span>).<span class=\"kw\">await</span>.unwrap();</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_stats\" class=\"method\"><h4 class=\"code-header\">pub async fn <a class=\"fn\">get_stats</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;ClientStats, Error&gt;</h4></section></summary><div class=\"docblock\"><p>Get stats of all <a href=\"Index\">Indexes</a>.</p>\n<h5 id=\"example-11\"><a class=\"doc-anchor\" href=\"#example-11\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>stats = client.get_stats().<span class=\"kw\">await</span>.unwrap();</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.health\" class=\"method\"><h4 class=\"code-header\">pub async fn <a class=\"fn\">health</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Health, Error&gt;</h4></section></summary><div class=\"docblock\"><p>Get health of Meilisearch server.</p>\n<h5 id=\"example-12\"><a class=\"doc-anchor\" href=\"#example-12\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>health = client.health().<span class=\"kw\">await</span>.unwrap();\n\n<span class=\"macro\">assert_eq!</span>(health.status, <span class=\"string\">\"available\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_healthy\" class=\"method\"><h4 class=\"code-header\">pub async fn <a class=\"fn\">is_healthy</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Get health of Meilisearch server.</p>\n<h5 id=\"example-13\"><a class=\"doc-anchor\" href=\"#example-13\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>health = client.is_healthy().<span class=\"kw\">await</span>;\n\n<span class=\"macro\">assert_eq!</span>(health, <span class=\"bool-val\">true</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_keys_with\" class=\"method\"><h4 class=\"code-header\">pub async fn <a class=\"fn\">get_keys_with</a>(\n    &amp;self,\n    keys_query: &amp;KeysQuery,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;KeysResults, Error&gt;</h4></section></summary><div class=\"docblock\"><p>Get the API <a href=\"Key\">Keys</a> from Meilisearch with parameters.</p>\n<p>See [<code>Client::create_key</code>], [<code>Client::get_key</code>], and the <a href=\"https://www.meilisearch.com/docs/reference/api/keys#get-all-keys\">meilisearch documentation</a>.</p>\n<h5 id=\"example-14\"><a class=\"doc-anchor\" href=\"#example-14\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>query = KeysQuery::new();\nquery.with_limit(<span class=\"number\">1</span>);\n\n<span class=\"kw\">let </span>keys = client.get_keys_with(<span class=\"kw-2\">&amp;</span>query).<span class=\"kw\">await</span>.unwrap();\n\n<span class=\"macro\">assert_eq!</span>(keys.results.len(), <span class=\"number\">1</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_keys\" class=\"method\"><h4 class=\"code-header\">pub async fn <a class=\"fn\">get_keys</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;KeysResults, Error&gt;</h4></section></summary><div class=\"docblock\"><p>Get the API <a href=\"Key\">Keys</a> from Meilisearch.</p>\n<p>See [<code>Client::create_key</code>], [<code>Client::get_key</code>], and the <a href=\"https://www.meilisearch.com/docs/reference/api/keys#get-all-keys\">meilisearch documentation</a>.</p>\n<h5 id=\"example-15\"><a class=\"doc-anchor\" href=\"#example-15\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>keys = client.get_keys().<span class=\"kw\">await</span>.unwrap();\n\n<span class=\"macro\">assert_eq!</span>(keys.limit, <span class=\"number\">20</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_key\" class=\"method\"><h4 class=\"code-header\">pub async fn <a class=\"fn\">get_key</a>(&amp;self, key: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.str.html\">str</a>&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Key, Error&gt;</h4></section></summary><div class=\"docblock\"><p>Get one API [Key] from Meilisearch.</p>\n<p>See also [<code>Client::create_key</code>], [<code>Client::get_keys</code>], and the <a href=\"https://www.meilisearch.com/docs/reference/api/keys#get-one-key\">meilisearch documentation</a>.</p>\n<h5 id=\"example-16\"><a class=\"doc-anchor\" href=\"#example-16\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>key = client.get_key(key).<span class=\"kw\">await</span>.expect(<span class=\"string\">\"Invalid key\"</span>);\n\n<span class=\"macro\">assert_eq!</span>(key.name, <span class=\"prelude-val\">Some</span>(<span class=\"string\">\"Default Search API Key\"</span>.to_string()));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.delete_key\" class=\"method\"><h4 class=\"code-header\">pub async fn <a class=\"fn\">delete_key</a>(&amp;self, key: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.str.html\">str</a>&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.unit.html\">()</a>, Error&gt;</h4></section></summary><div class=\"docblock\"><p>Delete an API [Key] from Meilisearch.</p>\n<p>See also [<code>Client::create_key</code>], [<code>Client::update_key</code>], [<code>Client::get_key</code>], and the <a href=\"https://www.meilisearch.com/docs/reference/api/keys#delete-a-key\">meilisearch documentation</a>.</p>\n<h5 id=\"example-17\"><a class=\"doc-anchor\" href=\"#example-17\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>key = KeyBuilder::new();\n<span class=\"kw\">let </span>key = client.create_key(key).<span class=\"kw\">await</span>.unwrap();\n<span class=\"kw\">let </span>inner_key = key.key.clone();\n\nclient.delete_key(key).<span class=\"kw\">await</span>.unwrap();\n\n<span class=\"kw\">let </span>keys = client.get_keys().<span class=\"kw\">await</span>.unwrap();\n\n<span class=\"macro\">assert!</span>(keys.results.iter().all(|key| key.key != inner_key));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.create_key\" class=\"method\"><h4 class=\"code-header\">pub async fn <a class=\"fn\">create_key</a>(\n    &amp;self,\n    key: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;KeyBuilder&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Key, Error&gt;</h4></section></summary><div class=\"docblock\"><p>Create an API [Key] in Meilisearch.</p>\n<p>See also [<code>Client::update_key</code>], [<code>Client::delete_key</code>], [<code>Client::get_key</code>], and the <a href=\"https://www.meilisearch.com/docs/reference/api/keys#create-a-key\">meilisearch documentation</a>.</p>\n<h5 id=\"example-18\"><a class=\"doc-anchor\" href=\"#example-18\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>name = <span class=\"string\">\"create_key\"</span>.to_string();\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>key = KeyBuilder::new();\nkey.with_name(<span class=\"kw-2\">&amp;</span>name);\n\n<span class=\"kw\">let </span>key = client.create_key(key).<span class=\"kw\">await</span>.unwrap();\n\n<span class=\"macro\">assert_eq!</span>(key.name, <span class=\"prelude-val\">Some</span>(name));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.update_key\" class=\"method\"><h4 class=\"code-header\">pub async fn <a class=\"fn\">update_key</a>(\n    &amp;self,\n    key: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;KeyUpdater&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Key, Error&gt;</h4></section></summary><div class=\"docblock\"><p>Update an API [Key] in Meilisearch.</p>\n<p>See also [<code>Client::create_key</code>], [<code>Client::delete_key</code>], [<code>Client::get_key</code>], and the <a href=\"https://www.meilisearch.com/docs/reference/api/keys#update-a-key\">meilisearch documentation</a>.</p>\n<h5 id=\"example-19\"><a class=\"doc-anchor\" href=\"#example-19\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>new_key = KeyBuilder::new();\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>new_key = client.create_key(new_key).<span class=\"kw\">await</span>.unwrap();\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>key_update = KeyUpdater::new(new_key);\n\n<span class=\"kw\">let </span>name = <span class=\"string\">\"my name\"</span>.to_string();\nkey_update.with_name(<span class=\"kw-2\">&amp;</span>name);\n\n<span class=\"kw\">let </span>key = client.update_key(key_update).<span class=\"kw\">await</span>.unwrap();\n\n<span class=\"macro\">assert_eq!</span>(key.name, <span class=\"prelude-val\">Some</span>(name));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_version\" class=\"method\"><h4 class=\"code-header\">pub async fn <a class=\"fn\">get_version</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Version, Error&gt;</h4></section></summary><div class=\"docblock\"><p>Get version of the Meilisearch server.</p>\n<h5 id=\"example-20\"><a class=\"doc-anchor\" href=\"#example-20\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>version = client.get_version().<span class=\"kw\">await</span>.unwrap();</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wait_for_task\" class=\"method\"><h4 class=\"code-header\">pub async fn <a class=\"fn\">wait_for_task</a>(\n    &amp;self,\n    task_id: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u32.html\">u32</a>&gt;,\n    interval: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.84.1/core/time/struct.Duration.html\" title=\"struct core::time::Duration\">Duration</a>&gt;,\n    timeout: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.84.1/core/time/struct.Duration.html\" title=\"struct core::time::Duration\">Duration</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Task, Error&gt;</h4></section></summary><div class=\"docblock\"><p>Wait until Meilisearch processes a [Task], and get its status.</p>\n<p><code>interval</code> = The frequency at which the server should be polled. <strong>Default = 50ms</strong></p>\n<p><code>timeout</code> = The maximum time to wait for processing to complete. <strong>Default = 5000ms</strong></p>\n<p>If the waited time exceeds <code>timeout</code> then an [<code>Error::Timeout</code>] will be returned.</p>\n<p>See also [<code>Index::wait_for_task</code>, <code>Task::wait_for_completion</code>, <code>TaskInfo::wait_for_completion</code>].</p>\n<h5 id=\"example-21\"><a class=\"doc-anchor\" href=\"#example-21\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>movies = client.index(<span class=\"string\">\"movies_client_wait_for_task\"</span>);\n\n<span class=\"kw\">let </span>task = movies.add_documents(<span class=\"kw-2\">&amp;</span>[\n    Document { id: <span class=\"number\">0</span>, kind: <span class=\"string\">\"title\"</span>.into(), value: <span class=\"string\">\"The Social Network\"</span>.to_string() },\n    Document { id: <span class=\"number\">1</span>, kind: <span class=\"string\">\"title\"</span>.into(), value: <span class=\"string\">\"Harry Potter and the Sorcerer's Stone\"</span>.to_string() },\n], <span class=\"prelude-val\">None</span>).<span class=\"kw\">await</span>.unwrap();\n\n<span class=\"kw\">let </span>status = client.wait_for_task(task, <span class=\"prelude-val\">None</span>, <span class=\"prelude-val\">None</span>).<span class=\"kw\">await</span>.unwrap();\n\n<span class=\"macro\">assert!</span>(<span class=\"macro\">matches!</span>(status, Task::Succeeded { .. }));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_task\" class=\"method\"><h4 class=\"code-header\">pub async fn <a class=\"fn\">get_task</a>(&amp;self, task_id: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.u32.html\">u32</a>&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Task, Error&gt;</h4></section></summary><div class=\"docblock\"><p>Get a task from the server given a task id.</p>\n<h5 id=\"example-22\"><a class=\"doc-anchor\" href=\"#example-22\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>task = index.delete_all_documents().<span class=\"kw\">await</span>.unwrap();\n\n<span class=\"kw\">let </span>task = client.get_task(task).<span class=\"kw\">await</span>.unwrap();</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_tasks_with\" class=\"method\"><h4 class=\"code-header\">pub async fn <a class=\"fn\">get_tasks_with</a>(\n    &amp;self,\n    tasks_query: &amp;TasksQuery&lt;'_, TasksPaginationFilters, Http&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;TasksResults, Error&gt;</h4></section></summary><div class=\"docblock\"><p>Get all tasks with query parameters from the server.</p>\n<h5 id=\"example-23\"><a class=\"doc-anchor\" href=\"#example-23\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>query = TasksSearchQuery::new(<span class=\"kw-2\">&amp;</span>client);\nquery.with_index_uids([<span class=\"string\">\"get_tasks_with\"</span>]);\n\n<span class=\"kw\">let </span>tasks = client.get_tasks_with(<span class=\"kw-2\">&amp;</span>query).<span class=\"kw\">await</span>.unwrap();</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.cancel_tasks_with\" class=\"method\"><h4 class=\"code-header\">pub async fn <a class=\"fn\">cancel_tasks_with</a>(\n    &amp;self,\n    filters: &amp;TasksQuery&lt;'_, TasksCancelFilters, Http&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;TaskInfo, Error&gt;</h4></section></summary><div class=\"docblock\"><p>Cancel tasks with filters [<code>TasksCancelQuery</code>].</p>\n<h5 id=\"example-24\"><a class=\"doc-anchor\" href=\"#example-24\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>query = TasksCancelQuery::new(<span class=\"kw-2\">&amp;</span>client);\nquery.with_index_uids([<span class=\"string\">\"movies\"</span>]);\n\n<span class=\"kw\">let </span>res = client.cancel_tasks_with(<span class=\"kw-2\">&amp;</span>query).<span class=\"kw\">await</span>.unwrap();</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.delete_tasks_with\" class=\"method\"><h4 class=\"code-header\">pub async fn <a class=\"fn\">delete_tasks_with</a>(\n    &amp;self,\n    filters: &amp;TasksQuery&lt;'_, TasksDeleteFilters, Http&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;TaskInfo, Error&gt;</h4></section></summary><div class=\"docblock\"><p>Delete tasks with filters [<code>TasksDeleteQuery</code>].</p>\n<h5 id=\"example-25\"><a class=\"doc-anchor\" href=\"#example-25\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>query = TasksDeleteQuery::new(<span class=\"kw-2\">&amp;</span>client);\nquery.with_index_uids([<span class=\"string\">\"movies\"</span>]);\n\n<span class=\"kw\">let </span>res = client.delete_tasks_with(<span class=\"kw-2\">&amp;</span>query).<span class=\"kw\">await</span>.unwrap();</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_tasks\" class=\"method\"><h4 class=\"code-header\">pub async fn <a class=\"fn\">get_tasks</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;TasksResults, Error&gt;</h4></section></summary><div class=\"docblock\"><p>Get all tasks from the server.</p>\n<h5 id=\"example-26\"><a class=\"doc-anchor\" href=\"#example-26\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>tasks = client.get_tasks().<span class=\"kw\">await</span>.unwrap();\n\n<span class=\"macro\">assert!</span>(tasks.results.len() &gt; <span class=\"number\">0</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.generate_tenant_token\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">generate_tenant_token</a>(\n    &amp;self,\n    api_key_uid: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.84.1/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>,\n    search_rules: <a class=\"enum\" href=\"https://docs.rs/serde_json/1.0.138/serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a>,\n    api_key: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.str.html\">str</a>&gt;,\n    expires_at: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;OffsetDateTime&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.84.1/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>, Error&gt;</h4></section></summary><div class=\"docblock\"><p>Generates a new tenant token.</p>\n<h5 id=\"example-27\"><a class=\"doc-anchor\" href=\"#example-27\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>api_key_uid = <span class=\"string\">\"76cf8b87-fd12-4688-ad34-260d930ca4f4\"</span>.to_string();\n<span class=\"kw\">let </span>token = client.generate_tenant_token(api_key_uid, <span class=\"macro\">serde_json::json!</span>([<span class=\"string\">\"*\"</span>]), <span class=\"prelude-val\">None</span>, <span class=\"prelude-val\">None</span>).unwrap();\n\n<span class=\"kw\">let </span>client = Client::new(MEILISEARCH_URL, <span class=\"prelude-val\">Some</span>(token)).unwrap();</code></pre></div>\n</div></details></div></details>",0,"hoover3_database::db_management::meilisearch::MeilisearchDatabaseHandle"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Client\" class=\"impl\"><a href=\"#impl-Client\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Client</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">new</a>(\n    host: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.84.1/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;,\n    api_key: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.84.1/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Client, Error&gt;</h4></section></summary><div class=\"docblock\"><p>Create a client using the specified server.</p>\n<p>Don’t put a ‘/’ at the end of the host.</p>\n<p>In production mode, see <a href=\"https://www.meilisearch.com/docs/learn/security/master_api_keys#authentication\">the documentation about authentication</a>.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>MEILISEARCH_URL = <span class=\"macro\">option_env!</span>(<span class=\"string\">\"MEILISEARCH_URL\"</span>).unwrap_or(<span class=\"string\">\"http://localhost:7700\"</span>);\n<span class=\"kw\">let </span>MEILISEARCH_API_KEY = <span class=\"macro\">option_env!</span>(<span class=\"string\">\"MEILISEARCH_API_KEY\"</span>).unwrap_or(<span class=\"string\">\"masterKey\"</span>);\n\n<span class=\"kw\">let </span>client = Client::new(MEILISEARCH_URL, <span class=\"prelude-val\">Some</span>(MEILISEARCH_API_KEY)).unwrap();</code></pre></div>\n</div></details></div></details>",0,"hoover3_database::db_management::meilisearch::MeilisearchDatabaseHandle"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Client%3CHttp%3E\" class=\"impl\"><a href=\"#impl-Clone-for-Client%3CHttp%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Http&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for Client&lt;Http&gt;<div class=\"where\">where\n    Http: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + HttpClient,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.84.1/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; Client&lt;Http&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/1.84.1/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.84.1/src/core/clone.rs.html#174\">Source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.84.1/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.84.1/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","hoover3_database::db_management::meilisearch::MeilisearchDatabaseHandle"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Client%3CHttp%3E\" class=\"impl\"><a href=\"#impl-Debug-for-Client%3CHttp%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Http&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for Client&lt;Http&gt;<div class=\"where\">where\n    Http: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.84.1/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> + HttpClient,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.84.1/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.84.1/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.84.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.84.1/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.84.1/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.84.1/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","hoover3_database::db_management::meilisearch::MeilisearchDatabaseHandle"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[53477]}