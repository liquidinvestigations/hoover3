/*
 * SeekStorm REST API documentation
 *
 * Search engine library & multi-tenancy server
 *
 * The version of the OpenAPI document: 0.12.11
 * Contact: wolf.garbe@seekstorm.com
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration};


/// struct for typed errors of method [`get_file_api`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetFileApiError {
    Status400(),
    Status401(),
    Status404(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`index_file_api`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum IndexFileApiError {
    Status400(),
    Status401(),
    Status404(),
    UnknownValue(serde_json::Value),
}


/// Get PDF file from index with index_id
pub async fn get_file_api(configuration: &configuration::Configuration, apikey: &str, index_id: i64, document_id: i64) -> Result<Vec<i32>, Error<GetFileApiError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_apikey = apikey;
    let p_index_id = index_id;
    let p_document_id = document_id;

    let uri_str = format!("{}/api/v1/index/{index_id}/file/{document_id}", configuration.base_path, index_id=p_index_id, document_id=p_document_id);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.header("apikey", p_apikey.to_string());

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<GetFileApiError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Index PDF file (byte array) to the index with the specified apikey and index_id, and return the number of indexed docs. - Converts PDF to a JSON document with \"title\", \"body\", \"url\" and \"date\" fields and indexes it. - extracts title from metatag, or first line of text, or from filename - extracts creation date from metatag, or from file creation date (Unix timestamp: the number of seconds since 1 January 1970) - copies all ingested pdf files to \"files\" subdirectory in index
pub async fn index_file_api(configuration: &configuration::Configuration, apikey: &str, file: &str, date: &str, index_id: i64, request_body: Vec<i32>) -> Result<i32, Error<IndexFileApiError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_apikey = apikey;
    let p_file = file;
    let p_date = date;
    let p_index_id = index_id;
    let p_request_body = request_body;

    let uri_str = format!("{}/api/v1/index/{index_id}/file", configuration.base_path, index_id=p_index_id);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.header("apikey", p_apikey.to_string());
    req_builder = req_builder.header("file", p_file.to_string());
    req_builder = req_builder.header("date", p_date.to_string());
    req_builder = req_builder.json(&p_request_body);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let content = resp.text().await?;
        let entity: Option<IndexFileApiError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

