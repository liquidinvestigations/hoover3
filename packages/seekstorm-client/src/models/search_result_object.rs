/*
 * SeekStorm REST API documentation
 *
 * Search engine library & multi-tenancy server
 *
 * The version of the OpenAPI document: 0.12.11
 * Contact: wolf.garbe@seekstorm.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SearchResultObject {
    #[serde(rename = "time")]
    pub time: i32,
    #[serde(rename = "query")]
    pub query: String,
    #[serde(rename = "offset")]
    pub offset: i32,
    #[serde(rename = "length")]
    pub length: i32,
    #[serde(rename = "count")]
    pub count: i32,
    #[serde(rename = "count_total")]
    pub count_total: i32,
    #[serde(rename = "query_terms")]
    pub query_terms: Vec<String>,
    #[serde(rename = "results")]
    pub results: Vec<serde_json::Value>,
    #[serde(rename = "facets")]
    pub facets: std::collections::HashMap<String, Vec<Vec<serde_json::Value>>>,
    #[serde(rename = "suggestions")]
    pub suggestions: Vec<String>,
}

impl SearchResultObject {
    pub fn new(time: i32, query: String, offset: i32, length: i32, count: i32, count_total: i32, query_terms: Vec<String>, results: Vec<serde_json::Value>, facets: std::collections::HashMap<String, Vec<Vec<serde_json::Value>>>, suggestions: Vec<String>) -> SearchResultObject {
        SearchResultObject {
            time,
            query,
            offset,
            length,
            count,
            count_total,
            query_terms,
            results,
            facets,
            suggestions,
        }
    }
}

