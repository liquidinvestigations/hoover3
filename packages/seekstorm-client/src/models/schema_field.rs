/*
 * SeekStorm REST API documentation
 *
 * Search engine library & multi-tenancy server
 *
 * The version of the OpenAPI document: 0.12.11
 * Contact: wolf.garbe@seekstorm.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// SchemaField : Defines a field in index schema: field, stored, indexed , field_type, facet, boost.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SchemaField {
    /// unique name of a field
    #[serde(rename = "field")]
    pub field: String,
    /// only stored fields are returned in the search results
    #[serde(rename = "stored")]
    pub stored: bool,
    /// only indexed fields can be searched
    #[serde(rename = "indexed")]
    pub indexed: bool,
    /// type of a field
    #[serde(rename = "field_type")]
    pub field_type: models::FieldType,
    /// optional faceting for a field Faceting can be enabled both for string field type and numerical field types. both numerical and string fields can be indexed (indexed=true) and stored (stored=true) in the json document, but with field_facet=true they are additionally stored in a binary format, for fast faceting and sorting without docstore access (decompression, deserialization)
    #[serde(rename = "facet", skip_serializing_if = "Option::is_none")]
    pub facet: Option<bool>,
    /// optional custom weight factor for Bm25 ranking
    #[serde(rename = "boost", skip_serializing_if = "Option::is_none")]
    pub boost: Option<f32>,
}

impl SchemaField {
    /// Defines a field in index schema: field, stored, indexed , field_type, facet, boost.
    pub fn new(
        field: String,
        stored: bool,
        indexed: bool,
        field_type: models::FieldType,
    ) -> SchemaField {
        SchemaField {
            field,
            stored,
            indexed,
            field_type,
            facet: None,
            boost: None,
        }
    }
}
