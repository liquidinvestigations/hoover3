/*
 * SeekStorm REST API documentation
 *
 * Search engine library & multi-tenancy server
 *
 * The version of the OpenAPI document: 0.12.11
 * Contact: wolf.garbe@seekstorm.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// FieldType : FieldType defines the type of a field in the document: u8, u16, u32, u64, i8, i16, i32, i64, f32, f64, point, string, stringset, text.
/// FieldType defines the type of a field in the document: u8, u16, u32, u64, i8, i16, i32, i64, f32, f64, point, string, stringset, text.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum FieldType {
    #[serde(rename = "U8")]
    U8,
    #[serde(rename = "U16")]
    U16,
    #[serde(rename = "U32")]
    U32,
    #[serde(rename = "U64")]
    U64,
    #[serde(rename = "I8")]
    I8,
    #[serde(rename = "I16")]
    I16,
    #[serde(rename = "I32")]
    I32,
    #[serde(rename = "I64")]
    I64,
    #[serde(rename = "Timestamp")]
    Timestamp,
    #[serde(rename = "F32")]
    F32,
    #[serde(rename = "F64")]
    F64,
    #[serde(rename = "Bool")]
    Bool,
    #[serde(rename = "String")]
    String,
    #[serde(rename = "StringSet")]
    StringSet,
    #[serde(rename = "Point")]
    Point,
    #[serde(rename = "Text")]
    Text,
}

impl std::fmt::Display for FieldType {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::U8 => write!(f, "U8"),
            Self::U16 => write!(f, "U16"),
            Self::U32 => write!(f, "U32"),
            Self::U64 => write!(f, "U64"),
            Self::I8 => write!(f, "I8"),
            Self::I16 => write!(f, "I16"),
            Self::I32 => write!(f, "I32"),
            Self::I64 => write!(f, "I64"),
            Self::Timestamp => write!(f, "Timestamp"),
            Self::F32 => write!(f, "F32"),
            Self::F64 => write!(f, "F64"),
            Self::Bool => write!(f, "Bool"),
            Self::String => write!(f, "String"),
            Self::StringSet => write!(f, "StringSet"),
            Self::Point => write!(f, "Point"),
            Self::Text => write!(f, "Text"),
        }
    }
}

impl Default for FieldType {
    fn default() -> FieldType {
        Self::U8
    }
}
